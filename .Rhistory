}
cbind(-b-rad,-b+rad)/(2*a)
}
quadratic.formula(1,-5,6)
quadratic.formula
function (a, b, c)
f
rad <- b^2 - 4 * a * c
if(is.complex(rad) || all(rad >= 0)) f
rad <- sqrt(rad)
g else f
rad <- sqrt(as.complex(rad))
g
cbind(-b - rad, -b + rad) / (2 * a)
}
quadratic.formula
function (a, b, c)
{
rad <- b^2 - 4 * a * c
if(is.complex(rad) || all(rad >= 0)) {
rad <- sqrt(rad)
} else {
rad <- sqrt(as.complex(rad))
}
cbind(-b - rad, -b + rad) / (2 * a)
}
print(7/13 - 3/31,digits = 16)
summary(7/13-3/31)
quadratic.formula
function (a, b, c)
{
rad <- b^2 - 4 * a * c
if(is.complex(rad) || all(rad >= 0)) {
rad <- sqrt(rad)
} else {
rad <- sqrt(as.complex(rad))
}
cbind(-b - rad, -b + rad) / (2 * a)
}
vec <- numeric(0)
for (i in 1:n) vec <- c(vec,i)
n <- 10
for (i in 1:n) vec <- c(vec,i)
vec <- numeric(n)
for(i in 1:n) vec[i] <- i
vec
vec <- 1:n
vec
print(vec<-1:n)
my.df <- data.frame(a=character(0), b=numeric(0))
for(i in 1:n)
my.df <- rbind(my.df, data.frame(a=sample(letters,1),b=runif(1)))}
my.df <- data.frame(a=character(0), b=numeric(0))
for (i in 1:n){
my.df <- rbind(my.df, data.frame(a=sample(letters,1),b=runif(1)))
}
rpois(1,10)
my.df <- data.frame(a=character(0),b=numeric(0))
for(i in 1:n){
this.N <- rpois(1,10)
my.df <- rbind(my.df,data.frame(a=sample(letters,this.N,replace=TRUE),b=runif(this.N)))
}
attribute(a)
attributes(a)
attributes(b)
a = character(0)
attributes(a)
class(a)
b=numeric(0)
class(b)
m <- data.frame(a=character(0),b=numeric(0))
class(m)
for(i in 1:N)
print(this.N <- rpois(1,10))
N <- 10
for(i in 1:N)
print(this.N <- rpois(1,10))
help(rpois)
help(rbind)
binomial(10.0.5)
binomial(10,0.5)
help binomial
?binomial
firstname = "jeff"
class(firstname)
firstname
heightCM = 188.0
class(heightCM)
numberSons = 1L
class(numberSons)
numberSons
teachingCoursera = TRUE
class(teachingCoursera)
teachingCoursera
heights = c(188.2,181.3,193.4)
heights
firstnames = c("heff","roger","andrew")
firstname
firstnames
vector1 = c(188.2,181.3,193.4)
vector2 = c("jeff","roger","andrew","brian")
mylist = list(heights=vector1,firstname=vector2)
mylist
mylist[height]
myMatrix = matrix(c(1,2,3,4),byrow=T,nrow=2)
myMatrix
vector1 = c(188.2,181.3,193.4,192.3)
vector2 = c("jeff","roger","andrew","brian")
myDataframe = data.frame(height=vector1,name=vector2)
myDataframe
smoker = c("yes","no","yes","yes")
smokerFactor = as.factor(smoker)
smokerFactor
is.na(vector2)
vector1[c(1,2,4)]
args(dnom)
args(dnorm)
x = seq(from=-5,to=5,length=10)
normalDensity = dnorm(x,mean=0,sd=1)
round(normalDensity,2)
args(dbinom)
x = seq(0,10,by=1)
binomialDensity = dbinom(x,size=10,prob=0.5)
round(binomialDensity)
round(binomialDensity,2)
binomialDensity
args(sample)
height = rnorm(10,mean=188,sd=3)
height
sample(height,size=10,replace=TRUE)
sample(height,size=10,replace=FALSE)
set.seed(123)
height
probs = c(0.4,0.3,0.1,0,0,0,0.1,0.1,0,0);
sum(probs)
sample(height,size=10,replace=TRUE,prob=probs)
set.seed(12345)
rnorm(5,mean=0,sd=1)
set.seed(12345)
rnorm(5,0,1)
set.seed(5)
sample(1:8,size=4,replace=FALSE)
probs = c(5,0,5,5,5,0,8,0)/28
sample(1:8,size=4,replace=FALSE,prob=probs)
sample(1:8,size=4,replace=FALSE,prob=probs)
set.seed(31)
heightsCM = rnorm(30,mean=188,sd=5);
weightsK = rnorm(30,mean=84,sd=3)
hasDaughter = sample(c(TRUE,TRUE),size=30,replace=T)
dataFrame = data.frame(heightsCM,weightsK,hasDaughter)
dataFrameSubset = dataFrame(heightsCM>188)
dataFrameSubset = dataFrame[heightsCM>188]
dataFrameSubset = subset(dataFrame,heightsCM>188)
mena(dataFrameSubset$weightsK)
mean(dataFrameSubset$weightsK)
set.seed(41)
cauchyValues=rvcauchy(n=100, location=0, scale=1)
cauchyValues=rvt(n=100, location=0, scale=1)
cauchyValues=rcauchy(n=100, location=0, scale=1)
help sample
help(sample)
set.seed(415)
p = sample(cauchyValues,size=10,replace=TRUE)
P
p
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
x
y
cls
set.seed(345)
for (i in 1:40){}
for (i in 1:40){
coinFlip <- rbinom(1,size=1,prob=0.5)
if(coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3),each=5)
}
}
par(mar=rep(0.2,4))
heatmap(dataMatrix)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400),nrow=40)
image(1:10,1:10,t(dataMatrix)[,nrow(dataMatrix):1])
help(image)
t(dataMatrix)[,nrow(dataMatrix):1]
p<-t(dataMatrix)[,nrow(dataMatrix):1]
image(1:10,1:10,p)
image(1:10,1:40,p)
par(mar=rep(0.2,4))
heatmap(dataMatrix)
hh ,- hclust(dist(dataMatrix)); dataMatrixOrdered <- dataMatrix[hh$order,]
hh <- hclust(dist(dataMatrix)); dataMatrixOrdered <- dataMatrix[hh$order,]
par(nfrow=c(1,3))
image(t(dataMatrixOrdered):1)
image(t(dataMatrixOrdered)[(,nrow(dataMatrixOrdered):1])
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
dataMatrixOrdered
hh$Order
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row",ylab="Row Mean",pch=19)
par(nfrow=c(1,3))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1,xlab="Row",ylab="Row Mean",pch=19)
plot(colMeans(dataMatrixOrdered),xlab="Column",ylab="Column Mean",pch=19)
help(svd)
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
plot(svd1$u[,1],40:1,,xlab="Row",ylab="First left singular vector",pch=19)
plot(svd1$v[,1],xlab="Row",ylab="First right singular vector",pch=19)
par(mfrow=c(1,2))
plot(svd1$d,xlab="Column",ylab="Singular value",pch=19)
plot(svd1$d^2/sum(svd$d^2),xlab="Column",ylab="Percent of variance explained"),pch=19
plot(svd1$d^2/sum(svd$d^2),xlab="Column",ylab="Percent of variance explained",pch=19)
plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Percent of variance explained",pch=19)
set.seed(67890)
for(i in 1:40)
{
coinFlip1 <- rbinom(1,size=1,prob=0.5)
coinFlip2 <- rbinom(1,size=1,prob=0.5)
if(coinFlip1){
dataMatrix[i,]<- dataMatrix[i,]+rep(c(0,5),each=5)
}
if(coinFlip2){
dataMatrix[i,]<- dataMatrix[i,]+rep(c(0,5),5)
}
}
hh <- hclust(dist(dataMatrix));
dataMatrixOrdered <- dataMatrix[hh$Order,]
dataMatrixOrdered
hh
svd2 <- svd(scale(dataMatrixOrdered))
svd2 <- svd(scale(dataMatrix0rdered))
svd2 <- svd(scale(dataMatrixOrdered))
dataMatrixOrdered
scale(dataMatrixOrdered)
library(impute)
install.packages("impute")
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
x
y <- sample(10,1,10)
y
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19)
dataFrame <- data.frame(x,y)
kmenaobj <- kmeans(dataFrame,centers=4)
plot(x,y,col=kmenaobj$cluster,pch=19)
points(kmenaobj$centers,col=1:4,pch=3,lwd=3)
y
install.packages("cluster")
help pam
help(pam)
??pam
testPam <- pam(dataFrame,k=4)
library(cluster)
testPam <- pam(dataFrame,k=4)
testPam
plot(x,y,col=kmenaobj$clustering,pch=19)
plot(x,y,col=kmenaobj$id.med,pch=19)
x
y
dataFrame
cls
kmenaobj
kmenaobj$totss
kmenaobj$withinss
help(kmeans)
x <- 1:10;
y <- 10:20;
p <- data.frame(x,y)
x
y <- 11:20
p <- data.frame(x,y)
p1 <- p[1:3]
p1 <- p(count 1:3)
p1 <- p[count 1:3]
a <- sample(10,1,20)
a
a[5]
a <- sample(10,15,20)
a
help(sample)
a <- sample(10,size=15)
a <- sample(10,size=15,replace=F)
a <- sample(10,size=15,replace=T)
a
b <- sample(10,size=15,replace=T)
coordinate <- data.frame(a,b)
help(dbscan)
??dbscan
dbscan(coordinate)
?dbscan
install.packages("fpc")
install.packages("fpc")
help(dbscan)
install.packages("fpc")
help(dbscan)
a
b
p <- dbscan(coordinate,5,2)
library(fpc)
help(dbscan)
p <- dbscan(coordinate,5,2)
p
plot(coordinate,col=p$seed)
a = 1/0;
a
a = 0/0;
a
cbind(x<-1:3,y<-10:12)
x
y
cbind(x,y)
x <- factor(c("yes","yes","no","yes","no"))
x
table(x)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
0/0
0/1
1/0
Inf/0
Inf/1
1/Inf
x <- data.frame(foo=1:4,bar=c(T,T,F,F))
row.names(x)
column.names(x)
names(x)
nrow(x)
ncolumn(x)
col.names(x)
ncol(x)
View(dataMatrixOrdered)
View(p)
clear
clc
cls
?matrix
x <- matrix(1:6,2,3)
x
x[,,drop=FALSE]
x<-data.frame(foo=1:4,bar=0.6,bax="hello")
name <- 'foo'
x[[name]]
x$name
x$foo
x$bar
x <- c(1,2,NA,4,NA,5)
x[!is.na(x)]
x[is.na(x)]
?complete.case
??complete.case()
x <- airquality[, -1] # x is a regression design matrix
y <- airquality[,  1] # y is the corresponding response
stopifnot(complete.cases(y) != is.na(y))
ok <- complete.cases(x,y)
sum(!ok) # how many are not "ok" ?
x <- x[ok,]
y <- y[ok]
x
head(temp)
M = matrix(seq(1,16),4,4)
apply(M,1,min)
m
M
apply(M,2,min)
M = array(seq(32),dim=c(4,4,2))
M
apply(M,1,min)
apply(M,2,min)
apply(M,2,sum)
apply(M,1,sum)
apply(M,c(1,2),sum)
x = list(a=1,b=1:3,c=10:100)
lapply(x,FUN=length)
lapply(x,FUN=sum)
sapply(x,FUN=length)
sapply(x,FUN=sum)
sapply(1:5,function(x) rnorm(3,x))
?rnorm
sapply(1:5,function(x) rnorm(3,x))
x = list(a=1,b=1:3,c=10:100)
vapply(x,FUN=length,FUN.VALUE=0)
sapply(x,FUN=length)
help('test');
exit
exit()
q()
temp <- read.csv("C:/Users/narayan/Desktop/files/data mart/csv_data/call_average.csv");
p <- data.matrix(temp)
head(temp)
temp <- read.csv("C:/Users/narayan/Desktop/files/data mart/00_call_detail_of_calling_customer.csv");
head(temp)
p = data.matrix(temp)
p[,list(mean<-mean(p$duration),sigma=sd(p$duration)),by=calling_no]
hello
?%in%
q()
source('C:/Users/narayan/Desktop/files/data mart/csv_data/cluster_tree01.R')
cluster_tree01()
normalize_call()
library(sqldf)
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
for i in 1:30{
for( i in 1:30){
fix(M)
fix(M)
}
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
cluster_k()
fix(cluster_k)
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
cluster_k()
ata <- read.csv("C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/all_daily_total_call_not_having_profile.csv");
View(ata)
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
cluster_k()
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
q()
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
cluster_k()
cluster_k(1)
cluster_k(p=1)
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
q()
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
source('C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/cluster_k.r')
data <- read.csv("C:/Users/narayan/Desktop/files/data mart/csv_data/02Assign/all_daily_total_call_not_having_profile.csv");
library("sqldf")
view(data)
view("data")
View(data)
sqldf("select * from data where sum_duration=2315")
dte = seq(as.Date("2011-05-01"), as.Date("2011-05-20"), by=1)
persid = c(1013,1011,1014,1015,1023,1028,1012,1018,1019,1020,1027,1016,1022,1017,1021,1024,1030,1025,1026,1029)
v1 = round(rnorm(20), 2)
v2 = round(rnorm(20), 2)
first=c("David","Sara","Jon","Jennifer","Ken","Ralph","Chris","David","David","Joe","Melanie","Debbie","Jessica","Ally","Amy","Ralph","Sara","Jane","John","Lance")
last=c("Smith","Jones","Alberts","Hudson","Jennings","Masterson","Browm","Felt","Spade","Montana","Keith","Hardson","Karson","Roberts","Smith","Jenning","Denver","Hudson","Reynolds","Darder")
stat = c("CA","IA","NC","FL","GA","OH","NY","CA","TX","TX","CA","CA","AZ","CO","OK","MI","WI","SC","VT","IL")
df1 <- data.frame(id=c(seq(1,20)), date=c(dte), var1=c(v1), var2=c(v2), personid=c(persid))
df2 <- data.frame(id=c(sort(persid)), firstname=c(first),lastname=c(last), state=c(stat))
library(sqldf)
sqldf("SELECT COUNT(*) FROM df2 WHERE state = 'CA'")
sqldf("SELECT df2.firstname, df2.lastname, df1.var1, df2.state FROM df1 INNER JOIN df2 ON df1.personid = df2.id WHERE df2.state = 'TX'")
sqldf("SELECT df2.state, COUNT(df1.var1) FROM df1 INNER JOIN df2 ON df1.personid = df2.id WHERE df1.var1 > 0 GROUP BY df2.state")
rm(list=ls())
q()
data <- read.csv("~/R/csv_data/02Assign/all_daily_total_call_not_having_profile.csv");
for(i in 1:30)
{ library(sqldf);assign(paste0("Day",i),sqldf)
assign(paste0("Day",i), sqldf(paste("select * from call_details where day =",i))) }
for(i in 1:30)
assign(paste0("Day",i), sqldf(paste("select * from call_details where day =",i)))
for(i in 1:30)
assign(paste0("Day",i), sqldf(paste("select * from data where day =",i)))
View(Day10)
rm(list=ls())
q()
?table
require(stats)
table(rpois(100,5))
p <- rpois(100,5)
cluster_p <- kmeans(p,3)
table(cluster_p$clusters)
table(p$clusters)
table(cluster_p$cluster)
table(cluster_p$centers,table(cluster_p$cluster))
cluster = as.data.frame(table(cluster_p$cluster))
data.frame(cluster_id=cluster[,1],center=cluster_p$centers,total_no=cluster[,2])
cluster
cbind(cluster_p$centers, cluster_p$size)
cluster_p
df <- data.frame(cluster_id=cluster[,1],center=cluster_p$centers,total_no=cluster[,2])
df[order(df$total_no)]
df[order(df$total_no),]
df[order(df$total_no,decreasing = TRUE),]
rm(list=ls())
q()
data(dune)
ord <- decorana(dune)
q()
setwd("C:/Users/narayan/Desktop/hackathon/opendata_hackathon")
tourist <- read.csv('tourist_flow_val.csv')
head(tourist)
typeof(tourist)
tourist <- data.frame(tourist)
typeof(tourist)
library(sqldf)
save.image("C:/Users/narayan/Desktop/hackathon/opendata_hackathon/workspace.RData")
head(tourist,1)
tourist[1]
tourist[[1]]
tourist[:1]
head(tourist,1)
tourist[x2001=10]
tourist[x2001==10]
tourist[2001==10]
tourist['Nationalit'==10]
View(tourist)
tourist['X2001'==10455]
print tourist['X2001'==10455]
sqldf('select * from tourist where Nationality = 3)
''
